#ifndef PBR_LIGHTING
#define PBR_LIGHTING
#include "DirLight.hglsl"
#include "PointLight.hglsl"
#include "SpotLight.hglsl"
#include "Material.hglsl"
#include "Constants.hglsl"

vec3 fresnelSchlick(vec3 V, vec3 H, vec3 F0)
{
    const float cosTheta = max(dot(V, H), 0.0);
    return F0 + (vec3(1.0) - F0) * pow(max(1.0 - cosTheta, 0.0f), 5);
}

float normalDistributionGGX(vec3 N, vec3 H, float roughness)
{
    const float a = roughness * roughness;
    const float a2 = a * a;
    const float NdotH = max(dot(N, H), 0.0);

    const float nom = a2;
    const float denom = (NdotH * NdotH) * (a2 - 1.0) + 1.0;
    const float saveValue = 0.0001f;
    return nom / max((M_PI * denom * denom), saveValue);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0f), 5.0);
}

float geometrySchlickGGX(float cosTheta, float k)
{
    return cosTheta / (cosTheta * (1.0 - k) + k);
}

float geometrySmith(float NdotL, float NdotV, float roughness)
{
    const float r = (roughness + 1.0);
    const float k = (r * r) * 0.125; // div by 8
    return geometrySchlickGGX(NdotL, k) * geometrySchlickGGX(NdotV, k);
}

float calculateAttenuation(vec3 lightPos, vec3 P, float radius)
{
    //https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
    //page 32
    const float distance = length(lightPos - P);
    const float squaredDistance = distance * distance;
    const float squaredRadius = radius * radius;
    const float factor = (squaredDistance * squaredDistance) / (squaredRadius * squaredRadius);
    const float smoothFactor = clamp(1.0f - factor, 0.0f, 1.0f);
    return smoothFactor * smoothFactor;
}

vec3 calculateSpecularColor(vec3 F, float roughness, vec3 N, vec3 H, float NdotL, float NdotV)
{
    const float D = normalDistributionGGX(N, H, roughness);
    const float G = geometrySmith(NdotL, NdotV, roughness);

    return (F * D * G) / max(4 * NdotV * NdotL, 0.00001);
}

vec3 calculatePbrLighting(DirLight dirLight, Material m, vec3 V, vec3 N, float NdotV)
{
    const vec3 L = normalize(-dirLight.direction);
    const vec3 H = normalize(V + L);

    const float NdotL = dot(N, L);
    if (NdotL > 0.0f)
    {
        const vec3 F = fresnelSchlick(V, H, m.F0);

        const vec3 kD = mix(vec3(1.0) - F, vec3(0.0), m.metalness);
        const vec3 diffuseColor = kD * m.albedo * ONE_BY_M_PI;

        const vec3 specularColor = calculateSpecularColor(F, m.roughness, N, H, NdotL, NdotV);

        return (diffuseColor + specularColor) * dirLight.color * NdotL;
    }
    return vec3(0);
}

vec3 calculatePbrLighting(PointLight p, Material m, vec3 V, vec3 N, vec3 P, float NdotV)
{
    const vec3 lightPos = p.positionAndRadius.xyz;
    const float lightRadius = p.positionAndRadius.w;
    const vec3 L = normalize(lightPos - P);
    const vec3 H = normalize(V + L);
    const float NdotL = dot(N, L);
    if (NdotL > 0.0f)
    {
        const vec3 F = fresnelSchlick(V, H, m.F0);

        const vec3 radiance = p.color * calculateAttenuation(lightPos, P, lightRadius);
        const vec3 kD = mix(vec3(1.0) - F, vec3(0.0), m.metalness);
        const vec3 diffuseColor = kD * m.albedo * ONE_BY_M_PI;

        const vec3 specularColor = calculateSpecularColor(F, m.roughness, N, H, NdotL, NdotV);
        return (diffuseColor + specularColor) * radiance * NdotL;
    }
    return vec3(0);
}

vec3 calculatePbrLighting(SpotLight s, Material m, vec3 V, vec3 N, vec3 P, float NdotV)
{
    vec3 directionToLight = normalize(-s.direction);
    vec3 L = normalize(s.position - P);

    float theta = dot(directionToLight, L);
    float epsilon = max(s.cutOff - s.outerCutOff, 0.0);
    float intensity = clamp((theta - s.outerCutOff) / epsilon, 0.0, 1.0);  

    vec3 H = normalize(V + L);
    float NdotL = max(dot(N, L), 0.0f);

    vec3 F = fresnelSchlick(V, H, m.F0);

    const vec3 radiance = s.color * calculateAttenuation(s.position, P, s.maxDistance) * intensity;

    const vec3 kD = mix(vec3(1.0) - F, vec3(0.0), m.metalness);
    const vec3 diffuseColor = kD * m.albedo * ONE_BY_M_PI;

    const vec3 specularColor = calculateSpecularColor(F, m.roughness, N, H, NdotL, NdotV);

    return (diffuseColor + specularColor) * radiance * NdotL;
}
#endif //PBR_LIGHTING